#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle orginit.el
#+Author: Ujwol Acharya

* Emacs Config
This is my configuration of emacs
The things work poroperly

* Initial UI features
these are the initial UI features, like removing the scroll bar, tool bar etc. Basically to make it look more GNU/Linuxy
** remove the startup page
#+BEGIN_SRC elisp

(setq inhibit-startup-message t)

#+END_SRC

** my own confis to remove menu bar , scroll bar and tool bar
#+BEGIN_SRC elisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode 1)
#+END_SRC

** Make emacs transparent

#+BEGIN_SRC elisp
;;;; Make emacs transparent

;;;;(set-frame-parameter (selected-frame) 'alpha '(93 93))

#+END_SRC

* Font configuration
this is where font is configured
#+BEGIN_SRC elisp

;; ;;;; fonts and stuff

(defvar runemacs/default-font-size 150)

;;(set-face-attribute 'default nil :font "monospace" :height runemacs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'default nil :font "Hack Nerd Font" :height 150)
;;(set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font" :height 150)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height 120 :weight 'regular)

#+END_SRC

* Use Package
Here use package is configured to install and use packages from repos like melpa
** setting up melpa elpa and use-package

Initialize package sources
#+BEGIN_SRC elisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))


;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

** use the ivy package
#+BEGIN_SRC elisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+END_SRC

** Swiper
#+BEGIN_SRC elisp
(use-package swiper :ensure t)
#+END_SRC

** php-mode
#+BEGIN_SRC elisp
(use-package php-mode :ensure t)
#+END_SRC

** doom-modeline
use doom-modeline thingy
#+BEGIN_SRC elisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
;;  :custom ((doom-modeline-height 25))
  )
#+END_SRC

** All the icons
 all the icons for the icons
#+BEGIN_SRC elisp 
(use-package all-the-icons
  :ensure t)
#+END_SRC

** other themes
some other themes than doom themes
#+BEGIN_SRC elisp
(use-package intellij-theme)
(use-package kaolin-themes)
(use-package zenburn-theme)
#+END_SRC

** doom themes
doom themes to make emacs look sexy
_NOTE: the themes are loaded here so make sure to install themes above here_
#+BEGIN_SRC elisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dracula t)




    ;; Enable flashing mode-line on errors
    ;;(doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    ;;(doom-themes-org-config)
    )
#+END_SRC

** Rainbow delemeters
#+BEGIN_SRC elisp
;;(use-package rainbow-delimiters
;;  :hook (prog-mode , rainbow-delimiters-mode ))
#+END_SRC

** which key mode
#+BEGIN_SRC elisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+END_SRC

** ivy rich mode
#+BEGIN_SRC elisp
(use-package ivy-rich
 :init (ivy-rich-mode 1))
#+END_SRC

** properly setting up counsel
#+BEGIN_SRC elisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
;;       	 ("C-x b" . counsel-ibuffer)
       	 ("C-x b" . counsel-switch-buffer)
       	 ("C-x v" . counsel-describe-variable)
       	 ("C-x f" . counsel-describe-function)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	  ("C-r" . 'counsel-minibuffer-history)))
#+END_SRC

** pdf-tools
make emacs a pdf viewer
#+BEGIN_SRC emacs-lisp
;;  (use-package pdf-tools
;;    :ensure t
;;    :defer t
;;    :commands (pdf-view-mode pdf-tools-install)
;;    :mode ("\\.[pP][dD][fF]\\" . pdf-view-mode)
;;    :config (pdf-tools-install)
;;    (define-pdf-cache-function pagelabels)
;;    :hook ((pdf-view-mode-hook . (lambda () (display-line-numbers-mode -q)))
;;           (pdf-view-mode-hook . pdf-tools-enable-minor-modes)))

#+END_SRC

** Howdoyou
this package lets you search stack overflow and it's sister sites and get your results back in org mode. This Package seems to be really cool
#+BEGIN_SRC emacs-lisp
  (use-package howdoyou
    :ensure t)
#+END_SRC

** Evil Mode configuration
Evil mode lets you run vim keybindings inside of emacs, best of both worlds
Everything here is for evil mode, make sure this is good
#+BEGIN_SRC elisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil) ;; initiall nil
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil) ;; initially nil
;;  (setq evil-respect-visual-line-mode t)
  :config
  (evil-set-undo-system 'undo-tree) 
  (evil-mode 1)  
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
;; yay goddamit , it is vim now . finally , i am back home .
;; das ist sehr gut damn vim ist uber alles editors 
;; now for evil collection

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

;; undo tree to make C-r in evil mode redo
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode 1))
#+END_SRC

** auto complete
#+BEGIN_SRC elisp
;; auto complete and stuff
(use-package auto-complete
  :ensure t
;;  :config
;;  (require 'auto-complete-config)
;;;   (ac-config-default)
  )
#+END_SRC

** company mode
#+BEGIN_SRC elisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
	:custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.1))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+END_SRC

** yasnepet
#+BEGIN_SRC elisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  )
#+END_SRC

** virtual terminal
A vertual terminal for emacs, I find it better than eshell
#+BEGIN_SRC elisp
  ;; (use-package vterm
  ;;  :ensure t)
#+END_SRC

** becom mode
it looks kinda cool
#+BEGIN_SRC elisp
(use-package beacon)
#+END_SRC
use beacon mode, comment if you think it's annoyingj
#+BEGIN_SRC elisp
;;  (beacon-mode 1)
#+END_SRC

** neotree to flex on vim users

#+BEGIN_SRC elisp
  (use-package neotree
    :ensure t)
#+END_SRC

** Helpful
 helpful because system crafters said it was cool
#+BEGIN_SRC elisp 
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC

** rainbow delimiters
#+BEGIN_SRC elisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** markdown mode
#+BEGIN_SRC elisp
(use-package markdown-mode 
  :ensure t)
#+END_SRC

** simple-httpd
 for opening a web server at a spesefic directory because it is easier for me to make websites
 and also because i am too lazy to configure apache and stuff
#+BEGIN_SRC elisp
(use-package simple-httpd
  :ensure t)
#+END_SRC

** projectile
projectile to move through projects blazingly fast
#+BEGIN_SRC elisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; ;; NOTE: Set this to the folder where you keep your Git repos!
  ;; (when (file-directory-p "~/Projects/Code")
  ;;   (setq projectile-project-search-path '("~/Projects/Code")))
  ;; (setq projectile-switch-project-action #'projectile-dired)
)

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+END_SRC  

** web mode
while writing html, i guess
#+BEGIN_SRC elisp
(use-package web-mode
  :ensure t)
#+END_SRC

** for javascript and typescript
this is for javascript, even though lsp just does the job anyway
#+BEGIN_SRC elisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+END_SRC

** flycheck
it checks for errors blazingly fast
#+BEGIN_SRC elisp
(use-package flycheck
  :ensure t)
#+END_SRC

** magit
magit is a git client, people say it's really good so i'm planning to test it out
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC

* for LaTeX

#+BEGIN_SRC elisp
;; (use-package auctex
;;   :ensure t
;;   :defer t
;;   :hook (LaTeX-mode .
;; 		    (lambda ()
;; 		      (push (list 'output-pdf "Zathura")
;; 			    TeX-view-program-selection))))
#+END_SRC

* LSP
LSP is Language Server Protocol, this is what gives IDE features to Emacs
** lsp mode
initual lsp mode setup function
#+BEGIN_SRC elisp
(defun lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

#+END_SRC

** Install lsp-mode and configure it using use-package
#+BEGIN_SRC elisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

#+END_SRC  

** lsp ui
IDK what it does, but it seems like it makes lsp look better
#+BEGIN_SRC elisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+END_SRC

** lsp treemacs
LSP treemacs, IDK what it does, I just copied lol
#+BEGIN_SRC elisp
(use-package lsp-treemacs
  :ensure t
  :after lsp)
#+END_SRC

** lsp ivy
I copied this as well, IDK what this does
#+BEGIN_SRC elisp
(use-package lsp-ivy
  :ensure t)
#+END_SRC

* ORG configuration 
this is for org mode, the greatest markdown format, i guess
** setting initial stuff up
IDK how the hell this works, i just copied this. I just wish this works

#+BEGIN_SRC elisp
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))



(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Hack" :weight 'regular :height (cdr face)))



  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+END_SRC

** Actually install the packages org and org-bullets
#+BEGIN_SRC elisp
(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")
  (efs/org-font-setup))


(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  ;; :custom
  ;;  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
  )
#+END_SRC

** configure org bullets
#+BEGIN_SRC elisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+END_SRC

** org pdf

#+BEGIN_SRC elisp
;;  (use-package org-pdftools
 ;;   :hook (org-load-hook . org-pdftools-setup-link))
#+END_SRC

** Org reveal for slideshow presentations
#+BEGIN_SRC elisp
(use-package ox-reveal
  :ensure t)
#+END_SRC

* The Rust Programming Language
while writing this, rust is my favouraite programming language. Even though LSP does most of the job, i still keep some more great rust features just because i like rust

** flycheck for rust
checks for errors in the buffer
#+BEGIN_SRC elisp
(use-package flycheck-rust
  :ensure t)
#+END_SRC

** some random shit to make it work better

yes
#+BEGIN_SRC elisp
;; (defun rk/rustic-mode-hook ()
;;   ;; so that run C-c C-c C-r works without having to confirm, but don't try to
;;   ;; save rust buffers that are not file visiting. Once
;;   ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
;;   ;; no longer be necessary.
;;   (when buffer-file-name
;;     (setq-local buffer-save-without-query t)))
#+END_SRC

** rustic
more advanced rust-mode which has some great features and added keybindings
#+BEGIN_SRC elisp
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)
    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    ;;(add-hook 'rustic-mode-hook 'lsp)
    ;;(add-hook 'rustic-mode-hook 'electric-part-local-mode)
    )
#+END_SRC  

* User Defined
Here I keep my user defined functions
user defined functions (starts with my/)
** to get the ide layout like vscode with neotree and stuff
#+BEGIN_SRC elisp
  (defun my/ide()
    "Get a modern IDE layout"
    (interactive)
    (evil-window-split)
    (evil-window-down 1)
    (evil-window-decrease-height 10)
    (eshell)
    (neotree)
    (evil-window-right 1)
    (lsp)
    )
#+END_SRC

** a keybinding for howdoyou
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-h j") 'howdoyou-query)
#+END_SRC

** run gcc for c mode
make a keybinding to run gcc to the opened file and run a.out
#+BEGIN_SRC elisp
  (defun my/run-the-c-code()
    "run the c code via gcc"
    (interactive)
    (eshell-command (concat "gcc " (buffer-file-name) " && ./a.out"))
    )
  (defun my/make()
    "run the c code via gcc"
    (interactive)
    (eshell-command "make")
    )


  (add-hook 'c-mode-common-hook (lambda()
                                  (local-set-key (kbd "C-c C-r C-c") 'my/run-the-c-code)
                                  (local-set-key (kbd "C-c C-r C-m") 'my/make)
                                  ))
  ;;(add-hook 'c-mode-common-hook (local-set-key (kbd "C-c C-r") (eshell-command (concat "gcc " (buffer-file-name) " && ./a.out") )))
#+END_SRC

** run shell scripts after making it executable
repurposed the c mode keybinding to run shell scripts

#+BEGIN_SRC elisp
  (defun my/run-the-bash-code()
    "run the bash code, NOTE: it gives executable permissions to the file (oviously)"
    (interactive)
    (eshell-command (concat "chmod +x " (buffer-file-name) " && bash " (buffer-file-name)))
    )
  (add-hook 'sh-mode-hook (lambda() (local-set-key (kbd "C-c C-r")
                                                   'my/run-the-bash-code
                                                   )))
#+END_SRC

** open current directory the file is located in
This is for quick nagivation
#+BEGIN_SRC elisp
  (defun my/open-current-folder()
    "Open the folder your file currently is in"
    (interactive)
    (find-file "./")
    )

;; set keybinding for this
  (global-set-key (kbd "C-x C-y") 'my/open-current-folder)

#+END_SRC

**  bracket completion in prog mode 
Use electric pair mode or something in prog mode hook
NOTE: Does not work rignt now, so not conna care
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook (lambda () (electric-pair-local-mode 1)))
#+END_SRC

** other random stuff
#+BEGIN_SRC elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (C . t)
     (emacs-lisp . t)
     (python . t)
     )
   )
  ;; custom keybindings

#+END_SRC

* End Stuff
** Start a org document scratch buffer
This is just me running one command after another to get what I want, i guess this is not very efficient
Gonna give up for now, It didn't work properly
#+BEGIN_SRC elisp
  ;; (switch-to-buffer "orgscratch")
  ;; (org-mode)
  ;; (text-scale-adjust 2)
  ;; (display-line-numbers-mode 0)
  ;; (insert "* Notes")
  ;; (switch-to-buffer "*scratch*")
#+END_SRC

