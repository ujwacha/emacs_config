(undo-tree-save-format-version . 1)
"3019492016640c617fb61323ba4a70d4f10d12ba"
[nil nil nil nil (25579 27806 939743 843000) 0 nil]
([nil nil ((apply yas--snippet-revive 1 47 #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 45 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 45 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (1 . 47)) nil (25579 27806 939742 732000) 0 nil])
([nil nil ((48 . 49) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -48) (undo-tree-id68 . -1) (#("x" 0 1 (fontified t face font-lock-comment-face)) . -49) (undo-tree-id69 . -1) 50 (41 . 50) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -41) (undo-tree-id70 . -1) 42 (33 . 42) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -33) (undo-tree-id71 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -34) (undo-tree-id72 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -35) (undo-tree-id73 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id74 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -37) (undo-tree-id75 . -1) (#("c" 0 1 (fontified t face font-lock-comment-face)) . -38) (undo-tree-id76 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -39) (undo-tree-id77 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -40) (undo-tree-id78 . -1) 41 (39 . 41) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -39) (undo-tree-id79 . -1) 40 (33 . 40)) nil (25579 27806 939739 959000) 0 nil])
([nil nil ((58 . 61) (#("\\" 0 1 (fontified t face font-lock-comment-face)) . -58) (undo-tree-id62 . -1) 59 (58 . 59) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -58) (undo-tree-id63 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -59) (undo-tree-id64 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -60) (undo-tree-id65 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -61) (undo-tree-id66 . -1) 62 (58 . 62) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -58) (undo-tree-id67 . -1) 59 (57 . 59)) nil (25579 27806 939729 773000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -74) (74 . 75) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -74) (74 . 75) (71 . 75) (67 . 71) (#(":" 0 1 (fontified t)) . -67) (undo-tree-id53 . -1) (#("w" 0 1 (fontified t)) . -68) (undo-tree-id54 . -1) (#("q" 0 1 (fontified t)) . -69) (undo-tree-id55 . -1) 70 (68 . 70) (#("e" 0 1 (fontified t)) . -68) (undo-tree-id56 . -1) (#("w" 0 1 (fontified t)) . -69) (undo-tree-id57 . -1) 70 (67 . 70) (#(":" 0 1 (fontified t)) . -67) (undo-tree-id58 . -1) 68 (67 . 68) (#("\\" 0 1 (fontified t)) . -67) (undo-tree-id59 . -1) 68 (67 . 68) (#(":" 0 1 (fontified t)) . -67) (undo-tree-id60 . -1) 68 (67 . 68) (#("\\" 0 1 (fontified t)) . -67) (undo-tree-id61 . -1) 68 (67 . 68) (66 . 67)) nil (25579 27806 939721 193000) 0 nil])
([nil nil ((74 . 76)) nil (25579 27806 939712 58000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -78) (undo-tree-id52 . -1) 79 (78 . 79) (#("}" 0 1 (fontified nil)) . -77) (77 . 78) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -77) (77 . 78) (75 . 78)) nil (25579 27806 939710 414000) 0 nil])
([nil nil ((79 . 84) (77 . 79)) nil (25579 27806 939708 317000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -89) (89 . 90) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -89) (89 . 90) (87 . 90) (#(" " 0 1 (fontified t)) . -87) (undo-tree-id51 . -1) 88 (87 . 88)) nil (25579 27806 939707 57000) 0 nil])
([nil nil ((89 . 91)) nil (25579 27806 939704 835000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -92) (92 . 93) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -92) (92 . 93) (91 . 93) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face))) . -91) (undo-tree-id46 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -92) (undo-tree-id47 . -1) (undo-tree-id48 . 1) (undo-tree-id49 . -1) 93 (#(")" 0 1 (fontified nil)) . -92) (92 . 93) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face))) . -92) (92 . 93) (90 . 93) (#("#" 0 1 (fontified t)) . -90) (undo-tree-id50 . -1) 91 (90 . 91)) nil (25579 27806 939702 935000) 0 nil])
([nil nil ((98 . 99) (#("r" 0 1 (fontified t)) . -98) (undo-tree-id45 . -1) 99 (92 . 99)) nil (25579 27806 939697 485000) 0 nil])
([nil nil ((102 . 103)) nil (25579 27806 939695 730000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 100)) nil (25579 27806 939694 809000) 0 nil])
([nil nil ((100 . 101)) nil (25579 27806 939694 6000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 102)) nil (25579 27806 939693 355000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -104) (104 . 105) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -104) (104 . 105) (103 . 105) (102 . 103)) nil (25579 27806 939692 310000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -106) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 107 (104 . 107)) nil (25579 27806 939690 116000) 0 nil])
([nil nil ((105 . 107)) nil (25579 27806 939682 549000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . -109) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 110) nil (25579 27806 939677 375000) 0 nil])
nil
